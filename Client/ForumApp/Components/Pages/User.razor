@page "/User"
@using System.ComponentModel.DataAnnotations
@attribute [StreamRendering]
@inject HttpClient HttpClient; 

<PageTitle>User</PageTitle>

<h1>Create or update your user here!</h1>

@if (userIsCreated)
{
    <p class="alert alert-success">
        User '@newUser.Username' has been created :) 
    </p>
}

else
{
    <EditForm Model="newUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="mb-3">
            <label for="username" class="form-label">Type your username here</label>
            <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
            <ValidationMessage For="@(() => newUser.Username)" />
        </div>
        
        <div class="mb-3">
            <label for="password" class="form-label">Type your password here</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="newUser.Password" />
            <ValidationMessage For="@(() => newUser.Password)" />
        </div>

        <button type="submit" class="btn btn-primary">Create User</button>
    </EditForm>
}

@code {

    private CreateUserDTO newUser = new();
    private bool userIsCreated = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            await Task.Delay(500);
            
            await HttpClient.PostAsJsonAsync("api/users", newUser);

            userIsCreated = true;

            newUser = new CreateUserDTO();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating user: {ex.Message}");
        }
    }

    public class CreateUserDTO
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }

}