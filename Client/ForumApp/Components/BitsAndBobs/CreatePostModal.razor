@using DTO
@using ForumApp.Services
@inject IPostService PostService
@inject AuthenticationStateProvider AuthProvider

<LoginModal @ref="loginModal" />
<CreateUserModal @ref="createUserModal" />

@if (isVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5); z-index: 1100;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Post</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
    
                <div class="modal-body">
                    <AuthorizeView>
                        <NotAuthorized>
                            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                                You need to log in to create a post.
                                <div class="mt-3">
                                    <button @onclick="ShowLoginModal" class="btn btn-primary btn-sm me-2">Log in</button>
                                    <button @onclick="ShowCreateUserModal" class="btn btn-outline-dark btn-sm">Create User</button>
                                </div>
                            </div>
                        </NotAuthorized>
                        <Authorized>
                            <input type="text" class="form-control mb-3" placeholder="Post Title" @bind="newPostTitle" />
                            <textarea class="form-control" placeholder="Post Content" @bind="newPostBody"></textarea>
                        </Authorized>
                    </AuthorizeView>
                </div>
    
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-primary" @onclick="SavePostAsync">Save Post</button>
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<PostDTO> OnPostCreated { get; set; }
    
    private string newPostTitle = string.Empty;
    private string newPostBody = string.Empty;
    private bool isVisible = false;
    private CreateUserModal? createUserModal;
    private LoginModal? loginModal;
    private int? currentUserId; 
    
    public async Task ShowModal()
    {
        isVisible = true;
        await SetCurrentUserAsync();
    }
    
    private void HideModal()
    {
        newPostTitle = string.Empty;
        newPostBody = string.Empty;
        isVisible = false;
        StateHasChanged();
    }
    
    private async Task SetCurrentUserAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var claimsPrincipal = authState.User;

        if (claimsPrincipal.Identity is not null && claimsPrincipal.Identity.IsAuthenticated)
        {
            string? userIdAsString = claimsPrincipal.Claims.FirstOrDefault(c => c.Type == "Id")?.Value;
            if (int.TryParse(userIdAsString, out int userId))
            {
                currentUserId = userId; 
            }
        }
    }
    
    private async Task SavePostAsync()
    {
        if (currentUserId == null)
        {
            throw new InvalidOperationException("User is not logged in.");
        }

        
        var newPost = new CreatePostDTO
        {
            Title = newPostTitle,
            Body = newPostBody,
            AuthorId = currentUserId.Value
        };
        
        var createdPost = await PostService.AddPostAsync(newPost);
        await OnPostCreated.InvokeAsync(createdPost);
        HideModal();
    }
    
    private void ShowLoginModal()
    {
        loginModal?.ShowModal();
    }
    
    private void ShowCreateUserModal()
    {
        createUserModal?.ShowModal();
    }
}